#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Apr 11 16:59:44 2018

@author: nguyentran
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jan  4 12:33:00 2018

@author: nguyentran
"""

from ..abs_IoTSE_resource.abs_IoTSE_resource import AbsIoTSEResource as AbsResource
from ..IoTSE_models_messages import IoTSE_messages as message

from flask import abort, request

#==================================
# /api/new-cont-ids
#==================================
class NewResIDsPost(AbsResource):
    """
    This resource is served by detector services.
    POST request to this resource starts the detection.
    Input: IoT Content entity (directly or via callback)
    Output: Callback message
    """    
    def post(self):
        """
        Get workflow id and inputs
        """
        workflow_id = self.extract_workflow_id()
        
        iot_contents = None
        try:
            iot_contents = self.get_iot_contents(workflow_id=workflow_id)
        except:
            """
            Do not abort the operation immediately because source detector does not
            need iot-content to work. Therefore, I leave the decision to 
            deal with non existence of iot content to the service implementation
            """
            print("Cannot find the iot content in either the message or at the call back")
            pass
        
        """
        Process and generate outputs
        """
        req_id = self.service.detect(iot_contents = iot_contents, wf_id = workflow_id)
        if req_id is None:
            """
            If we get a None request from the service, I assume that the client request is incorrect
            """
            abort(400)
        req_id = "%s/%s" % (self.generate_host_port_endpoint(), req_id)
        msg = message.CallbackMessage(request.url, "Invoked discovery process. Poll the returned URL for results.", req_id, workflow_id = workflow_id)
        return msg.to_dict(), 201

#==================================
# /api/new-cont-ids/<req_id>
#==================================
class NewResIDsGet(AbsResource):
    """
    This resource is served by detector services
    GET a list of resource IDs by a given key, which was generated by POST
    Input: N/A
    Output: IoT Content list message
    """
    def get(self, req_id):
        """
        Get workflow id and input key
        """
        workflow_id = self.extract_workflow_id()
        if req_id is None:
            abort(404)
            
        """
        Retrieve data and return 
        """
        res_ids = self.service.get_detect_result(req_id = req_id, wf_id = workflow_id)
        if res_ids is None:
            """
            If return from service is None, it means the given req_id is not available on this server
            """
            print("Resource %s does not exist." % req_id)
            abort(404)
        msg = message.IoTContentsMessage(request.url, "List of detected content id", res_ids, workflow_id = workflow_id) 
        return msg.to_dict()